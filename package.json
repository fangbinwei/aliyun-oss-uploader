{
  "name": "aliyun-oss-uploader",
  "displayName": "Aliyun OSS Uploader",
  "description": "Focus on uploading image to aliyun OSS.",
  "publisher": "fangbinwei",
  "repository": {
    "type": "git",
    "url": "https://github.com/fangbinwei/aliyun-oss-uploader.git"
  },
  "keywords": [
    "aliyun",
    "oss",
    "image",
    "picture",
    "upload",
    "aliyun oss",
    "alibaba cloud",
    "image uploader",
    "upload image"
  ],
  "version": "1.2.0",
  "icon": "resources/logo.png",
  "engines": {
    "vscode": "^1.40.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:elan.uploadFromClipboard",
    "onCommand:elan.uploadFromExplorer",
    "onCommand:elan.uploadFromExplorerContext",
    "onLanguage:markdown",
    "onView:bucketExplorer"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "elan.uploadFromClipboard",
        "title": "Elan: upload image from clipboard"
      },
      {
        "command": "elan.uploadFromExplorer",
        "title": "Elan: upload image from explorer"
      },
      {
        "command": "elan.uploadFromExplorerContext",
        "title": "Elan: upload image"
      },
      {
        "command": "elan.bucketExplorer.deleteFromContext",
        "title": "Delete"
      },
      {
        "command": "elan.bucketExplorer.uploadFromContext",
        "title": "Upload"
      },
      {
        "command": "elan.bucketExplorer.uploadFromClipboard",
        "title": "Upload from Clipboard"
      },
			{
				"command": "elan.bucketExplorer.refreshRoot",
				"title": "Refresh",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
      },
      {
        "command": "elan.bucketExplorer.copyLink",
        "title": "Copy Link",
        "icon": {
					"light": "resources/light/link.svg",
					"dark": "resources/dark/link.svg"
        }
      },
      {
        "command": "elan.bucketExplorer.copyFromContext",
        "title": "Copy to"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "elanView",
          "title": "Elan",
          "icon": "resources/activitybar.svg"
        }
      ]
    },
    "views": {
      "elanView": [
        {
          "id": "bucketExplorer",
          "name": "Bucket"
        },
        {
          "id": "recentlyUploadedExplorer",
          "name": "Recently Uploaded(WIP)"
        }
      ]
    },
    "menus": {
      "commandPalette": [
        {
          "command": "elan.uploadFromExplorerContext",
          "when": "false"
        },
        {
          "command": "elan.bucketExplorer.deleteFromContext",
          "when": "false"
        },
        {
          "command": "elan.bucketExplorer.uploadFromContext",
          "when": "false"
        },
        {
          "command": "elan.bucketExplorer.uploadFromClipboard",
          "when": "false"
        },
        {
          "command": "elan.bucketExplorer.copyLink",
          "when": "false"
        },
        {
          "command": "elan.bucketExplorer.copyFromContext",
          "when": "false"
        }
      ],
      "explorer/context": [
        {
          "when": "resourceExtname =~/^\\.(png|jpg|jpeg|webp|gif|bmp|tiff|ico|svg)$/i",
          "command": "elan.uploadFromExplorerContext",
          "group": "5_cutcopypaste"
        }
      ],
      "view/title": [
				{
					"command": "elan.bucketExplorer.refreshRoot",
					"when": "view == bucketExplorer",
					"group": "navigation"
				}
      ],
      "view/item/context": [
        {
          "command": "elan.bucketExplorer.deleteFromContext",
          "when": "view == bucketExplorer && viewItem == object",
          "group": "7_modification"
        },
        {
          "command": "elan.bucketExplorer.copyLink",
          "when": "view == bucketExplorer && viewItem == object",
          "group": "inline"
        },
        {
          "command": "elan.bucketExplorer.uploadFromContext",
          "when": "view == bucketExplorer && viewItem == folder || view == bucketExplorer &&viewItem == bucket",
          "group": "upload@1"
        },
        {
          "command": "elan.bucketExplorer.uploadFromClipboard",
          "when": "view == bucketExplorer && viewItem == folder || view == bucketExplorer &&viewItem == bucket",
          "group": "upload@1"
        },
        {
          "command": "elan.bucketExplorer.copyFromContext",
          "when": "view == bucketExplorer && viewItem == object",
          "group": "5_cutcopypaste"
        }
      ]
    },
    "configuration": {
      "title": "Elan",
      "properties": {
        "elan.aliyun.accessKeyId": {
          "type": "string",
          "description": "Aliyun OSS accessKeyId.",
          "default": ""
        },
        "elan.aliyun.accessKeySecret": {
          "type": "string",
          "description": "Aliyun OSS accessKeySecret.",
          "default": ""
        },
        "elan.aliyun.bucket": {
          "type": "string",
          "description": "Aliyun OSS bucket instance.",
          "default": ""
        },
        "elan.aliyun.region": {
          "type": "string",
          "markdownDescription": "e.g. `oss-cn-shanghai`, [check details](https://github.com/ali-sdk/ali-oss#data-regions).",
          "default": ""
        },
        "elan.uploadName": {
          "type": "string",
          "markdownDescription": "Object name store on OSS\n- `${fileName}`: Filename of uploaded file.\n-`${ext}`: Filename extension of uploaded file.\n- `${contentHash}`: The hash of image. By default, it's the hex digest of md5 hash. You can specify the length of the hash, e.g. `${contentHash:8}`. \n-`${activeMdFilename}`: Filename of active markdown in text editor.",
          "default": "${fileName}_${contentHash:8}${ext}"
        },
        "elan.outputFormat": {
          "type": "string",
          "markdownDescription": "- `${fileName}`: Filename of uploaded file.\n- `${uploadName}`: Custom defined config. \n- `${url}`: After a file is uploaded successfully, the OSS sends a callback request to this URL. \n-`${activeMdFilename}`: Filename of markdown in active text editor.",
          "default": "![${fileName}](${url})"
        },
        "elan.bucketFolder": {
          "type": "string",
          "markdownDescription": "- `${relativeToVsRootPath}`: The path of the directory where the currently active file is located relative to the workspace root directory. \n-`${activeMdFilename}`: Filename of markdown in active text editor.",
          "default": ""
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run compile",
    "compile": "yarn run copy && tsc -p ./",
    "build": "webpack --mode production",
    "vspack": "vsce package -o aliyun-oss-uploader.vsix",
    "release": "standard-version",
    "clean": "rm -rf dist out",
    "watch": "yarn run copy && tsc --watch -p ./",
    "webpack-dev": "webpack --mode development --watch --info-verbosity verbose",
    "copy": "cpy ./src/utils/clipboard/* ./out/utils/clipboard/",
    "lint": "eslint src --ext ts",
    "pretest": "yarn run compile && yarn run lint",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.1",
    "@types/mocha": "^7.0.2",
    "@types/vscode": "^1.40.0",
    "@types/webpack": "^4.41.17",
    "@typescript-eslint/eslint-plugin": "^2.30.0",
    "@typescript-eslint/parser": "^2.30.0",
    "builtin-modules": "^3.1.0",
    "commitizen": "^4.1.2",
    "copy-webpack-plugin": "^6.0.1",
    "cpy-cli": "^3.1.1",
    "cz-customizable": "^6.2.0",
    "eslint": "^6.8.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-prettier": "^3.1.3",
    "glob": "^7.1.6",
    "mocha": "^7.1.2",
    "prettier": "^2.0.5",
    "standard-version": "^8.0.0",
    "ts-loader": "^7.0.5",
    "typescript": "^3.8.3",
    "vsce": "^1.75.0",
    "vscode-test": "^1.3.0",
    "webpack": "^4.43.0",
    "webpack-cli": "^3.3.11"
  },
  "dependencies": {
    "@types/ali-oss": "^6.0.5",
    "ali-oss": "^6.8.0",
    "clean-webpack-plugin": "^3.0.0",
    "date-fns": "^2.14.0",
    "execa": "^4.0.1"
  },
  "config": {
    "commitizen": {
      "path": "node_modules/cz-customizable"
    }
  }
}
